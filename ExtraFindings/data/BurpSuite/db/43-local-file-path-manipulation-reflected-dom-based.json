{
    "id": 2098001,
    "title": "Local file path manipulation (reflected DOM-based)",
    "description": [
        "Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.",
        "Local file path manipulation arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.",
        "The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.",
        "Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation."
    ],
    "fix": {
        "effort": 0, 
        "guidance": [
            "The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API."
        ]
    },
    "references": [
        {
            "url": "https://portswigger.net/kb/issues/00200351_local-file-path-manipulation-reflected-dom-based",
            "title": "Local file path manipulation (reflected DOM-based) "
        },
        {
            "url": "https://cwe.mitre.org/data/definitions/22.html",
            "title": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        },
        {
            "url": "https://cwe.mitre.org/data/definitions/73.html",
            "title": "CWE-73: External Control of File Name or Path"
        }
    ],
    "severity": "High",
    "language": "English"
}
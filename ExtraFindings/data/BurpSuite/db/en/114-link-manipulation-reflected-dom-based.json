{
    "id": 5246977,
    "title": "Link manipulation (reflected DOM-based)",
    "description": [
        "Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.",
        "DOM-based link manipulation arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:",
        "<bullet>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</bullet>",
        "<bullet>Causing the user to submit sensitive form data to a server controlled by the attacker.</bullet>",
        "<bullet>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</bullet>",
        "<bullet>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</bullet>",
        "Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation."
    ],
    "fix": {
        "effort": 0, 
        "guidance": [
            "The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target."
        ]
    },
    "references": [
        {
            "url": "https://portswigger.net/kb/issues/00501001_link-manipulation-reflected-dom-based",
            "title": "Link manipulation (reflected DOM-based)"
        },
        {
            "url": "https://cwe.mitre.org/data/definitions/20.html",
            "title": "CWE-20: Improper Input Validation"
        }
    ],
    "severity": "Low",
    "language": "English"
}
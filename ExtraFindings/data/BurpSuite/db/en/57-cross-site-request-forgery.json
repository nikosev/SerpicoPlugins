{
    "id": 2098944,
    "title": "Cross-site request forgery",
    "description": [
        "Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:",
        "<bullet>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</bullet>",
        "<bullet>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</bullet>",
        "<bullet>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</bullet>",
        "<bullet>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</bullet>"
    ],
    "fix": {
        "effort": 0, 
        "guidance": [
            "The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.",
            "An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses."
        ]
    },
    "references": [
        {
            "url": "https://portswigger.net/web-security/csrf",
            "title": "Cross-site request forgery (CSRF)"
        },
        {
            "url": "https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-",
            "title": "Using Burp to Test for Cross-Site Request Forgery (CSRF)"
        },
        {
            "url": "https://media.blackhat.com/eu-13/briefings/Lundeen/bh-eu-13-deputies-still-confused-lundeen-wp.pdf",
            "title": "The Deputies Are Still Confused"
        },
        {
            "url": "https://cwe.mitre.org/data/definitions/352.html",
            "title": "CWE-352: Cross-Site Request Forgery (CSRF)"
        }
    ],
    "severity": "Medium",
    "language": "English"
}